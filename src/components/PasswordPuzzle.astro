---
// A special puzzle component with a very special prize.
interface Props {
  password?: string;
}
const { password = "NeverGonnaGiveYouUp" } = Astro.props;
---

<div id="rickroll-puzzle-container" class="puzzle-container">

  <!-- ========================================================= -->
  <!-- LOCKED VIEW: This is what the user sees first. -->
  <!-- ========================================================= -->
  <div id="puzzle-locked-view">
    <p class="puzzle-intro">
      Oh, the BT Setting is locked and you need a password to unlock it? 
      This is a game for you. You need to find the password somewhere in the project...
    </p>

    <form id="password-form" class="password-form">
      <input 
        type="password" 
        id="password-input" 
        placeholder="Enter password..."
      />
      <button type="submit" class="starlight-button">Unlock</button>    
    </form>
    
    <div id="error-message" class="error-message hidden"></div>
    
    <div class="hint-section">
      <button id="hint-button" class="hint-button">Need a hint?</button>
      <div id="hint-text" class="hint-text hidden">
        It's in ND_BTSetting script.
      </div>
    </div>
  </div>

  <!-- ========================================================= -->
  <!-- UNLOCKED VIEW: This contains the PRIZE! -->
  <!-- ========================================================= -->
  <div id="puzzle-unlocked-view" class="hidden">
    <p class="success-message"><strong>YAYYY!!!</strong> Gotcha (☞ﾟヮﾟ)☞</p>
    
    <!-- THE FIX: We use a div as a placeholder for the YouTube API -->
    <div class="video-container">
      <div id="youtube-player"></div>
    </div>
    
    <slot />
  </div>
</div>

<script define:vars={{ password }}>
  // This script is now more advanced to use the YouTube Player API.

  let player; // This will hold the YouTube player object.

  // 1. Load the YouTube IFrame API script
  const tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  const firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 2. This function is called automatically by the API script when it's ready.
  // It MUST be a global function, so we attach it to the `window` object.
  window.onYouTubeIframeAPIReady = function() {
    player = new YT.Player('youtube-player', {
      height: '390',
      width: '640',
      videoId: 'dQw4w9WgXcQ', // The video ID for the Rickroll
      playerVars: {
        'playsinline': 1,
        'controls': 1 // Show controls so they can't easily stop it
      }
    });
  }

  // 3. Get references to our puzzle elements
  const lockedView = document.getElementById('puzzle-locked-view');
  const unlockedView = document.getElementById('puzzle-unlocked-view');
  const form = document.getElementById('password-form');
  const passwordInput = document.getElementById('password-input');
  const errorMessage = document.getElementById('error-message');
  const hintButton = document.getElementById('hint-button');
  const hintText = document.getElementById('hint-text');

  // 4. Handle the form submission (the user's click)
  form.addEventListener('submit', (event) => {
    event.preventDefault(); // Stop the page from reloading
    
    if (passwordInput.value === password) {
      // Correct password!
      lockedView.classList.add('hidden');
      unlockedView.classList.remove('hidden');

      // Because this code runs after a user click, browsers will
      // allow us to play the video with sound!
      if (player) {
        player.unMute();       // Unmute the player
        player.playVideo();    // Play the video
      }
    } else {
      // Incorrect password
      errorMessage.textContent = 'Incorrect password. Try again!';
      errorMessage.classList.remove('hidden');
      passwordInput.value = '';
      passwordInput.focus();
    }
  });

  // Hint button logic remains the same
  hintButton.addEventListener('click', () => {
    hintText.classList.toggle('hidden');
  });
</script>

<style>
  /* All styles remain the same, they will work perfectly. */
  .hidden { display: none; }
  .puzzle-container {
    border: 1px solid var(--sl-color-gray-4);
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin: 2rem 0;
    background-color: var(--sl-color-gray-6);
  }
  .puzzle-intro, .success-message { font-style: italic; margin-top: 0; }
  .success-message { color: var(--sl-color-green); font-size: 1.1em; }
  .password-form { display: flex; gap: 0.5rem; align-items: center; }
  #password-input {
    flex-grow: 1; padding: 0.5rem; background-color: var(--sl-color-gray-5);
    border: 1px solid var(--sl-color-gray-4); border-radius: 0.25rem; color: var(--sl-color-white);
  }
  .starlight-button {
    background-color: var(--sl-color-accent-low); color: var(--sl-color-accent-high);
    border: 1px solid var(--sl-color-accent-high); padding: 0.5rem 1rem; border-radius: 0.25rem;
    font-weight: 600; cursor: pointer; transition: background-color 0.2s, color 0.2s;
  }
  .starlight-button:hover { background-color: var(--sl-color-accent-high); color: var(--sl-color-white); }
  .error-message { color: var(--sl-color-red); margin-top: 0.75rem; font-weight: 600; }
  .hint-section { margin-top: 1rem; }
  .hint-button {
    background: none; border: none; color: var(--sl-color-gray-2);
    text-decoration: underline; cursor: pointer; padding: 0; font-size: 0.9em;
  }
  .hint-text {
    margin-top: 0.5rem; padding: 0.75rem; background-color: var(--sl-color-gray-5);
    border: 1px dashed var(--sl-color-gray-4); border-radius: 0.25rem;
  }
  .video-container {
    position: relative;
    overflow: hidden;
    width: 100%;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
    margin-top: 1rem;
    border-radius: 0.5rem;
  }
  .video-container #youtube-player { /* Target the player div */
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    height: 100%;
  }
</style>